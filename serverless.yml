# serverless.yml

service: marketing-cloud-proxy

useDotenv: true

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  tableName: ${env:REFRESH_TOKEN_TABLE}-${env:ENV}
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["DynamoDBTable", "Arn" ] }
  environment:
    APP_NAME: ${env:APP_NAME}
    MC_ACCOUNT_ID: ${env:MC_ACCOUNT_ID}
    MC_AUTHENTICATION_URL: ${env:MC_AUTHENTICATION_URL}
    MC_BASE_API_URL: ${env:MC_BASE_API_URL}
    MC_CLIENT_ID: ${env:MC_CLIENT_ID}
    MC_CLIENT_SECRET: ${env:MC_CLIENT_SECRET}
    MC_DATA_EXTENSION: ${env:MC_DATA_EXTENSION}
    MC_DEFAULT_WSDL: ${env:MC_DEFAULT_WSDL}
    MC_SOAP_ENDPOINT: ${env:MC_SOAP_ENDPOINT}
    MC_WSDL_FILE_LOCAL_LOCATION: ${env:MC_WSDL_FILE_LOCAL_LOCATION}
    REFRESH_TOKEN_TABLE: ${self:custom.tableName}

package:
  patterns:
    '!.direnv'

functions:
  app:
    name: ${env:APP_NAME}-${env:ENV}
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

resources:
  Resources:
    DynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: KeyName
            AttributeType: S
        KeySchema:
          - AttributeName: KeyName
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
